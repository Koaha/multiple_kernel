import networkx as nx
import matplotlib.pyplot as plt
import plotly.graph_objects as go

class KernelTreeVisualizer:
    """
    Visualizes the structure of kernel composition trees generated in KernelTree.

    Parameters
    ----------
    kernel_tree : KernelTree
        Instance of KernelTree with constructed kernels.

    Examples
    --------
    >>> tree_visualizer = KernelTreeVisualizer(kernel_tree)
    >>> tree_visualizer.plot_tree(lib="networkx", title="Kernel Composition Tree")
    """

    def __init__(self, kernel_tree):
        self.kernel_tree = kernel_tree
        self.graph = nx.DiGraph()

    def build_graph(self, node, depth=1, parent=None):
        """
        Recursively builds a graph representation of the kernel tree.

        Parameters
        ----------
        node : str or callable
            Current kernel or operator node.
        depth : int
            Current depth in the kernel tree.
        parent : str or callable, optional
            Parent node to create directed edges.
        """
        node_label = f"{type(node).__name__}" if callable(node) else str(node)
        self.graph.add_node(node_label, depth=depth)

        if parent:
            self.graph.add_edge(parent, node_label)

        if depth < self.kernel_tree.depth:
            children = self.kernel_tree.construct_children(node)
            for child in children:
                self.build_graph(child, depth + 1, node_label)

    def plot_tree(self, lib="networkx", title="Kernel Composition Tree", show_labels=True, **kwargs):
        """
        Plots the kernel composition tree with interactive features.

        Parameters
        ----------
        lib : str, optional
            Library to use for plotting. Options: 'networkx', 'plotly'.
        title : str, optional
            Title of the tree plot.
        show_labels : bool, optional
            Whether to display labels on nodes.

        Examples
        --------
        >>> tree_visualizer.plot_tree(lib="plotly", title="Interactive Kernel Composition Tree")
        >>> tree_visualizer.plot_tree(lib="networkx")
        """
        root_nodes = self.kernel_tree.constructed_kernels[1]
        for root in root_nodes:
            self.build_graph(root)

        if lib == "networkx":
            plt.figure(figsize=(10, 7))
            pos = nx.spring_layout(self.graph, seed=42)
            nx.draw(self.graph, pos, with_labels=show_labels, node_size=3000, node_color="skyblue", font_size=10, font_weight="bold")
            plt.title(title)
            plt.show()

        elif lib == "plotly":
            self._plot_interactive_tree(title, show_labels)

    def _plot_interactive_tree(self, title, show_labels):
        """
        Creates an interactive Plotly visualization with enhanced features.

        Parameters
        ----------
        title : str
            Title of the plot.
        show_labels : bool
            Whether to show labels on nodes.
        """
        pos = nx.spring_layout(self.graph, seed=42)
        x_pos, y_pos = zip(*pos.values())
        node_labels = list(pos.keys())

        # Edge coordinates for plotting
        edge_x = []
        edge_y = []
        for edge in self.graph.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x += [x0, x1, None]
            edge_y += [y0, y1, None]
        
        # Plotly graph
        fig = go.Figure()

        # Edges
        fig.add_trace(go.Scatter(
            x=edge_x, y=edge_y,
            line=dict(width=1, color="gray"),
            hoverinfo="none",
            mode="lines"
        ))

        # Nodes with hover information and custom labels
        fig.add_trace(go.Scatter(
            x=x_pos, y=y_pos, text=node_labels,
            mode="markers+text" if show_labels else "markers",
            marker=dict(size=20, color="skyblue", line=dict(width=2)),
            textposition="top center",
            hoverinfo="text",
            hovertext=[f"Node: {label}<br>Depth: {self.graph.nodes[label]['depth']}" for label in node_labels]
        ))

        # Layout settings
        fig.update_layout(
            title=title,
            showlegend=False,
            xaxis=dict(showgrid=False, zeroline=False),
            yaxis=dict(showgrid=False, zeroline=False),
            margin=dict(b=0, l=0, r=0, t=40),
            hovermode="closest"
        )

        # Add interactivity options (zoom, pan, highlight paths)
        fig.update_xaxes(fixedrange=False)
        fig.update_yaxes(fixedrange=False)

        # Interactivity for highlighting paths on node click
        for node in node_labels:
            fig.add_annotation(
                x=pos[node][0], y=pos[node][1], text=node,
                showarrow=True, arrowhead=1, ax=0, ay=-40,
                bgcolor="white", bordercolor="black", borderwidth=1,
                visible=False, xref="x", yref="y",
                hovertext=f"Clicked Node: {node}",
                font=dict(size=12, color="black")
            )

        fig.show()
